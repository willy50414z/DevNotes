SAX速度較快，但讀取方式是透過Listener的方式讀取，較適合一次性讀取，設定初始資料

//解析檔案
		// 讀取xml檔案
		File xmlFile = new File("D:\\Java\\example\\Servlet+Struts\\src\\chart\\src\\airticle.xml");
		// 建立一個 SAXParserFactory對像. 透過單例模式建立
		SAXParserFactory factory = SAXParserFactory.newInstance();
		try {
			// 建立SAXParser對像
			SAXParser parser = factory.newSAXParser();
			// 解析檔案,並定義解析時的事件處理
			parser.parse(xmlFile, new MySaxHandler());
			//解析"字串",並定義解析時的事件處理
			//parser.parse(new InputSource(new StringReader("")), new JAXA_SAX());
			} catch (Exception e) {
			e.printStackTrace();
		}

//解析過程透過類似Listener方式讀出數據
public class MySaxHandler extends DefaultHandler {

	//開始讀檔時調用
	@Override
	 public void startDocument() throws SAXException {
	  
	  System.out.println("startDocument: ");
	 
	 }
	//結束讀檔時調用
	 @Override
	 public void endDocument() throws SAXException {
	  
	  System.out.println("enddocument: ");
	 }
	 //開始讀標籤時調用
	 @Override
	 public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
	  
	  System.out.println("startElement: "+qName);

	 }

	//讀完標籤時調用
	 @Override
	 public void endElement(String uri, String localName, String qName) throws SAXException {
	  
	  System.out.println("endElement: "+qName);
	 }

	 //讀取VALUE時調用，參數分別為字串、起始index、長度
	 @Override
	 public void characters(char[] ch, int start, int length) throws SAXException {
	  
	  String data=new String(ch,start,length);
	  System.out.println(data);
	 
	 }

}